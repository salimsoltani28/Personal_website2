all_imgs_pred_join %>%
mutate(img= str_replace(img,"*//",""))
all_imgs_pred_join %>%
mutate(img= str_replace(img,"*\//",""))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 40))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 60))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 75))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 80))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 85))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 84))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 70))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 60))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 55))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 50))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 48))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 20))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 25))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 27))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 28))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 38))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 45))
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 48))
photoscheck <- all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 48))
View(photoscheck)
all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 48))
photoscheck <- all_imgs_pred_join %>%
mutate(img= str_sub(img,start = 48))
View(photoscheck)
library(keras)
library(tensorflow)
library(tfdatasets)
library(purrr)
library(ggplot2)
library(rsample)
library(stars)
library(raster)
library(reticulate)
library(mapview)
#.libPaths("/home/ssoltani/R/x86_64-pc-linux-gnu-library/4.1")
#load the libraries
require(keras)
library(tensorflow)
library(tfdatasets)
library(tidyverse)
library(tibble)
#library(rsample)
library(countcolors)
library(reticulate)
library(gtools)
#library(sampler)
library(rgdal)
#set a seed
tf$compat$v1$set_random_seed(as.integer(28))
#gpu2 <- tf$config$experimental$get_visible_devices('GPU')[[2]]
gpu_no = tf$config$list_physical_devices()[c(1,3)]
library(reticulate)
reticulate::use_condaenv("rtf", required = TRUE)
library(reticulate)
reticulate::use_condaenv("rtf", required = TRUE)
#.libPaths("/home/ssoltani/R/x86_64-pc-linux-gnu-library/4.1")
#load the libraries
require(keras)
library(tensorflow)
library(tfdatasets)
library(tidyverse)
library(tibble)
#library(rsample)
library(countcolors)
library(reticulate)
library(gtools)
#library(sampler)
library(rgdal)
#set a seed
tf$compat$v1$set_random_seed(as.integer(28))
#gpu2 <- tf$config$experimental$get_visible_devices('GPU')[[2]]
gpu_no = tf$config$list_physical_devices()[c(1,3)]
library(reticulate)
reticulate::use_condaenv("r-reticulate", required = TRUE)
#.libPaths("/home/ssoltani/R/x86_64-pc-linux-gnu-library/4.1")
#load the libraries
require(keras)
library(tensorflow)
library(tfdatasets)
library(tidyverse)
library(tibble)
#library(rsample)
library(countcolors)
library(reticulate)
library(gtools)
#library(sampler)
library(rgdal)
#set a seed
tf$compat$v1$set_random_seed(as.integer(28))
#gpu2 <- tf$config$experimental$get_visible_devices('GPU')[[2]]
gpu_no = tf$config$list_physical_devices()[c(1,3)]
tf$config$set_visible_devices(gpu_no)
gpu1 <- tf$config$experimental$get_visible_devices('GPU')[[1]]
tf$config$experimental$set_memory_growth(device = gpu1, enable = TRUE)
strategy <- tf$distribute$MirroredStrategy() # required for using multiple GPUs, uncomment both lines in case just one GPU is used strategy$num_replicas_in_sync
tf$keras$experimental$WideDeepModel
load("C:/Users/salim/Desktop/PlantNetdata/iNat_PlantNetcombined_Mydiv_image_Rdata_all_filtering_dist_angle_stam.RData")
#filter out images with distance
all_imags_filtered <- all_imgs_pred_join %>%
#set all dist for grass to 5
#filter(!ref==11) %>%
filter(stam_nostam==0 , dist>0.2 ,dist<15) #%>%
View(all_imags_filtered)
load("C:/Users/salim/Desktop/PlantNetdata/Rdata_currentlyused/iNat_PlantNetcombined_Mydiv_image_Rdata_all_filtering_dist_angle_stam.RData")
View(all_imags_filtered)
#.libPaths("/home/ssoltani/R/x86_64-pc-linux-gnu-library/4.1")
#load the libraries
require(keras)
library(tensorflow)
library(tfdatasets)
library(tidyverse)
library(tibble)
#library(rsample)
library(countcolors)
library(reticulate)
library(gtools)
#library(sampler)
library(rgdal)
all_imags_filtered %>% group_by(ref) %>% top_n(10)
alldata <- all_imags_filtered %>% group_by(ref) %>% top_n(10)
View(alldata)
alldata <- all_imags_filtered %>% filter(data_source=="iNat")) %>% group_by(ref) %>% top_n(10)
alldata <- all_imags_filtered %>% filter(data_source=="iNat")%>% group_by(ref) %>% top_n(10)
View(alldata)
iNat_img
alldatainat <- iNat_img %>% group_by(ref) %>% top_n(10)
View(alldatainat)
alldatainat <- iNat_img %>% group_by(ref) %>% top_n(10)
alldatainat
alldatainat <- iNat_img %>% group_by(ref) %>% top_n(10)
alldatainat <- iNat_img %>% group_by(ref) %>% top_n(10,wt="ref")
View(alldatainat)
alldatainat <- iNat_img %>% filter(ref==1) %>% pull(ref)[10]
alldatainat <- iNat_img %>% filter(ref==1) %>% pull(ref)
alldatainat
alldatainat <- iNat_img %>% filter(ref==1) %>% pull(img)
alldatainat
alldatainat <- iNat_img %>% filter(ref==2) %>% pull(img)
alldatainat <- iNat_img %>% filter(ref==2) %>% pull(img)
alldatainat
iNat_folders
iNat_img
PlantNet_folders
iNat_folders
load("C:/Users/salim/Desktop/PlantNetdata/Server2/iNat_PlantNet_Rdata_Distance_stam_Filtering.RData")
iNat_folders
alldatainat <- iNat_img %>% group_by(ref) %>% top_n(10)
alldatainat <- iNat_img %>% group_by(ref) %>% top_n(10)
alldatainat <- iNat_img %>% group_by(ref) %>% select(img,ref) %>% top_n(10)
View(alldatainat)
alldata <- all_imags_filtered %>% filter(data_source=="iNat")%>% group_by(ref) %>% top_n(10)
alldata
View(alldata)
alldata <- all_imags_filtered %>% filter(data_source=="iNat")%>% group_by(ref) %>% top_n(2)
View(alldata)
alldata <- all_imags_filtered %>% filter(data_source=="plantNet")%>% group_by(ref) %>% top_n(2)
View(alldata)
table(all_imags_filtered$ref)
library(reticulate)
reticulate::use_virtualenv(virtualenv="python")
reticulate::use_virtualenv("python")
# require("ggplot2")
# require("scales")
# require("reshape")
# require(colorspace)
# library(RColorBrewer)
# require(colorRamps)
# library(corrplot)
library(tidyverse)
#load data
setwd("C:/Users/salim/Desktop/plantnet/00_completeData/")
datapath <- "C:/Users/salim/Downloads/data.txt"
maindata <- read.table(datapath)
maindata
View(maindata)
download.file("https://zenodo.org/record/4761451#collapseTwo")
# Load the necessary libraries
library(keras)
# Set the learning rate boundaries and step size
lr_low <- 1e-4
lr_high <- 1e-2
step_size <- 2000
# Create a cyclical learning rate schedule
clr_schedule <- function(epoch) {
lr <- lr_low + (lr_high - lr_low) * 0.5 * (1 + cos(pi * epoch / step_size))
return(lr)
}
# Define a callback to use the learning rate schedule
clr_callback <- callback_learning_rate_scheduler(schedule = clr_schedule)
# Define the model
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32, kernel_size = c(3, 3), activation = "relu", input_shape = c(28, 28, 1)) %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_conv_2d(filters = 64, kernel_size = c(3, 3), activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2)) %>%
layer_flatten() %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 10, activation = "softmax")
# Compile the model
model %>% compile(
optimizer = optimizer_adam(lr = lr_low),
loss = "categorical_crossentropy",
metrics = c("accuracy")
)
# Fit the model using the cyclical learning rate callback
model %>% fit(
x_train, y_train,
epochs = 10,
batch_size = 128,
callbacks = list(clr_callback)
)
# Load the necessary libraries
library(keras)
# Define the input layer
inputs <- layer_input(shape = c(28, 28, 1))
# Define the convolutional layers
conv1 <- inputs %>%
layer_conv_2d(filters = 32, kernel_size = c(3, 3), padding = "same", activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2), strides = c(2, 2)) %>%
layer_conv_2d(filters = 64, kernel_size = c(3, 3), padding = "same", activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2, 2), strides = c(2, 2))
# Define the dense layers
dense1 <- conv1 %>%
layer_flatten() %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dense(units = 10, activation = "softmax")
# Compile the model
model <- keras_model(inputs = inputs, outputs = dense1)
model %>% compile(
optimizer = "adam",
loss = "categorical_crossentropy",
metrics = c("accuracy")
)
CyclicalLearningRate
# Define the cyclical learning rate callback
clr <- CyclicalLearningRate(
base_lr = 0.01,
max_lr = 0.1,
step_size = 2000,
mode = "triangular"
)
library(keras)
dataset <- dataset_boston_housing()
c(c(train_data, train_targets), c(test_data, test_targets)) %<-% dataset
mean <- apply(train_data, 2, mean)
std <- apply(train_data, 2, sd)
train_data <- scale(train_data, center = mean, scale = std)
test_data <- scale(test_data, center = mean, scale = std)
model <- keras_model_sequential() %>%
layer_dense(
units = 64, activation = "relu",
input_shape = dim(train_data)[[2]]
) %>%
layer_dense(units = 64, activation = "relu") %>%
layer_dense(units = 1)
model %>% compile(
optimizer = optimizer_rmsprop(lr = 0.001),
loss = "mse",
metrics = c("mae")
)
callback_clr <- new_callback_cyclical_learning_rate(
step_size = 32,
base_lr = 0.001,
max_lr = 0.006,
gamma = 0.99,
mode = "exp_range"
)
install.packages("tfaddons")
library(tfaddons)
ls("package:tfaddons")
new_callback_cyclical_learning_rate
cos(pi * epoch / step_size)
epoch=50
cos(pi * epoch / step_size)
epoch / step_size
require(raster)
require(keras)
install.packages("keras")
require(keras)
require(raster)
require(keras)
library(tensorflow)
.libPaths()
.libPaths("C:/Program Files/R/R-4.1.2/library" )
require(keras)
install.packages("keras")
install.packages("keras")
.libPaths()
.libPaths("C:/Users/salim/Documents/R/win-library/4.1")
install.packages("keras")
require(keras)
.libPaths()
install.packages("reticulate")
install.packages("reticulate")
library(reticulate)
require(raster)
require(keras)
use_condaenv("base", required = T)
require(raster)
require(keras)
library(tensorflow)
require(rgdal)
require(rgeos)
library(tensorflow)
install.packages("reticulate", version = "1.26")
install.packages("reticulate", version = "1.26")
library(reticulate)
require(keras)
.libPaths()
.libPaths("C:/Program Files/R/R-4.1.2/library")
install.packages("keras")
install.packages("keras")
require(keras)
.libPaths()
unlink("C:/Program Files/R/R-4.1.2/library", recursive = T)
unlink("C:/Users/salim/Documents/R/win-library/4.1", recursive = T)
.libPaths()
require(raster)
require(keras)
library(tensorflow)
require(rgdal)
require(rgeos)
gpus = tf$config$experimental$list_physical_devices('GPU')
remove.packages("tensorflow")
install.packages("keras")
install.packages("keras")
install.packages("keras")
install.packages("Rtools ")
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
install_tensorflow(version = "2.9.0")
require(raster)
require(keras)
require(raster)
require(keras)
library(tensorflow)
require(rgdal)
require(rgeos)
gpus = tf$config$experimental$list_physical_devices('GPU')
require(raster)
require(keras)
library(tensorflow)
require(rgdal)
require(rgeos)
gpus = tf$config$experimental$list_physical_devices('GPU')
strategy$scope()
tempdir()
tempfile()
version
library(dplyr)
finaldata <- tibble::tibble(Listdata, ndata, thirdata,forthdata) %>% rowwise%>%  mutate(new_bin = cut(., breaks=2))
library(raster)
ls("package:raster")
matrix(1,3,3)
library(reticulate)
require(raster)
require(rgdal)
library(tidyverse)
install.packages("vctrs")
install.packages("vctrs")
library(tidyverse)
file_path <- file.path("F:/01_Workshop/02_CNN_all_case_studies/04_heatmap/2_Heatmap/SCD-AAAI2023/datasets/coco/cls_labels_onehot.npy")
return(readBin(file_path, "raw", size=8, n=1, endian="little"))
file_path
library(readNPY)
install.packages('readNPY')
install.packages("readNPY")
if (!require(devtools)) {
install.packages("devtools")
}
devtools::install_github("benjaminjack/npy")
img_paths
library(png)
path_to_images <- "C:/Users/salim/Desktop/all_species/"
# Set up the image file paths and species names
img_paths <- list.dirs(path_to_images)[-1]
species_names <- list.dirs(path_to_images, full.names = F)[-1]
# Load the images
imgs <- lapply(list.files(img_paths, pattern = ".png",full.names = T), png::readPNG)
library(ggplot2)
library(gridExtra)
# Function to create a ggplot object with the image
plot_image <- function(img) {
ggplot() +
annotation_custom(rasterGrob(img)) +
theme_void()
}
# Plot the images
plots <- lapply(imgs, plot_image)
library(png)
library(ggplot2)
library(gridExtra)
path_to_images <- "C:/Users/salim/Desktop/all_species/"
img_paths <- list.dirs(path_to_images)[-1]
species_names <- list.dirs(path_to_images, full.names = F)[-1]
imgs <- lapply(list.files(img_paths, pattern = ".png", full.names = T), png::readPNG)
plot_image <- function(img) {
ggplot() +
annotation_custom(rasterGrob(img)) +
theme_void()
}
plots <- lapply(imgs, plot_image)
library(grid)
path_to_images <- "C:/Users/salim/Desktop/all_species/"
img_paths <- list.dirs(path_to_images)[-1]
species_names <- list.dirs(path_to_images, full.names = F)[-1]
imgs <- lapply(list.files(img_paths, pattern = ".png", full.names = T), png::readPNG)
plot_image <- function(img) {
ggplot() +
annotation_custom(rasterGrob(img)) +
theme_void()
}
plots <- lapply(imgs, plot_image)
fig_width <- 8 * 72  # Figure width in pixels
fig_height <- 10 * 72  # Figure height in pixels
# Set the number of rows and columns
rows <- 10
columns <- 8
# Calculate the width and height of a single subplot in pixels
subplot_width <- fig_width / columns
subplot_height <- fig_height / rows
# Set the margin in pixels
margin_width <- 10
margin_height <- 10
# Calculate the relative widths and heights for grid.arrange()
relative_widths <- c(rep(subplot_width + margin_width, columns - 1), subplot_width)
relative_heights <- c(rep(subplot_height + margin_height, rows - 1), subplot_height)
grid.arrange(grobs = plots, ncol = columns, nrow = rows, widths = relative_widths, heights = relative_heights)
library(png)
library(ggplot2)
library(gridExtra)
library(grid)
path_to_images <- "C:/Users/salim/Desktop/all_species/"
img_paths <- list.dirs(path_to_images)[-1]
species_names <- list.dirs(path_to_images, full.names = F)[-1]
imgs <- lapply(list.files(img_paths, pattern = ".png", full.names = T), png::readPNG)
plot_image <- function(img) {
ggplot() +
annotation_custom(rasterGrob(img)) +
theme_void()
}
plots <- lapply(imgs, plot_image)
fig_width <- 8 * 72  # Figure width in pixels
fig_height <- 10 * 72  # Figure height in pixels
# Set the number of rows and columns
rows <- 10
columns <- 8
# Calculate the width and height of a single subplot in pixels
subplot_width <- fig_width / columns
subplot_height <- fig_height / rows
# Set the margin in pixels
margin_width <- 10
margin_height <- 10
# Calculate the relative widths and heights for grid.arrange()
relative_widths <- c(rep(subplot_width + margin_width, columns - 1), subplot_width)
relative_heights <- c(rep(subplot_height + margin_height, rows - 1), subplot_height)
grid.arrange(grobs = plots, ncol = columns, nrow = rows, widths = relative_widths, heights = relative_heights)
install.packages("websocket")
install.packages("xfun")
install.packages("xfun")
packageDescription("my_package")
install.packages("vctrs")
install.packages("vctrs")
detach(package:vctrs, unload = TRUE)
detach(package:vctrs, unload = TRUE)
library(vctrs)
install.packages("vctrs", version = "0.6.2")
install.packages("vctrs", version = "0.6.2")
library(vctrs)
tinytex::install_tinytex()
remotes::install_github('mitchelloharawild/icons@v0.1.0')
devtools::install_github("nstrayer/datadrivencv")
devtools::install_github("nstrayer/datadrivencv")
install.packages("fastmap", version=1.1.1)
remotes::install_version("fastmap", version = "1.1.1")
devtools::install_github("nstrayer/datadrivencv").
devtools::install_github("nstrayer/datadrivencv")
install.packages("fastmap")
install.packages("fastmap")
devtools::install_github("nstrayer/datadrivencv")
remotes::install_version("fastmap", version = "1.1.1")
blogdown::new_site(theme = "wowchemy/starter-hugo-portfolio-theme")
getwd()
setwd("D:/PhD Project/01 Workshop/14 PhD courses/12_CV_building/Website-CV-build/00_Salim_CV/")
getwd()
blogdown::new_site(theme = "wowchemy/starter-hugo-portfolio-theme")
blogdown::serve_site()
